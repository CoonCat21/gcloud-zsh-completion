#compdef gcloud
#------------------------------------------------------------
# Description:
#
#  Completion script for Google Cloud SDK
#
# Author:
#
#  * Colin Su (https://github.com/littleq0903)
#------------------------------------------------------------
#

## Common stuffs
local -a _first_arguments
_first_arguments=(
  # these are command groups
  'auth:Manage oauth2 credentials for the Google Cloud SDK'
  'components:Install, update, or remove the tools in the Google Cloud SDK'
  'config:View and edit Google Cloud SDK properties'
  'sql:Manage Cloud SQL databases'
  # these are just commands
	'init:Initialize a gcloud workspace in the current directory'
	'interactive:Use this tool in an interactive python shell'
	'version:Print version information for Cloud SDK components'
)

# common options
common_ops=(
  {--project+,-p+}":[Google Cloud Platform project to use for this invocation]:( )"
  {--quiet,-q}"[Disable all interactive prompts when running gcloud commands. If input is required, defaults will be used, or an error will be raised.]"
  "--user-output-enabled+:Control whether user intended output is printed to the console.:(true false)"
  "--verbosity+:Override the default verbosity for this command. This must be a standard logging verbosity level:(debug info warning error critical none)"
)

## for 'auth' command group
# Commands
local -a _auth_arguments
_auth_arguments=(
  "activate-refresh-token:Get credentials via an existing refresh token"
  "list:List the accounts for known credentials"
  "login:Get credentials via Google's oauth2 web flow"
  "revoke:Revoke authorization for credentials"
)

__gcloud-auth ()
{
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments \
    ':command:->command' \
    '*::options:->options'

#  echo
#  echo state: $state
#  echo line: $line
#  echo curcontext $curcontext
#  echo

  case $state in
    (command)
      _describe -t subcommand "gcloud :: auth Commands" _auth_arguments
      return
      ;;
    (options)
      case $line[1] in
        (list)
          _arguments \
            "--account+::List only credentials for one account:( )"
        ;;
        (login)
          # TODO: make options repeatable
          local args
          args=(
            "--account+:Override the account acquired from the web flow:( )"
            "--do-not-activate:Do not set the new credentials as active"
            "--no-launch-browser:Print a URL to be copied instead of launching a web browser"
            )
          _arguments -C $args
        ;;
        (revoke)
          _arguments \
            "--all:Revoke all known credentials"
        ;;
      esac
      ;;
  esac
}

## for 'components' command groups
local -a _components_arguments
_components_arguments=(
  'list:Command to list the current state of installed components'
  'remove:Command to remove installed components'
  'restore:Command to restore a backup of a Cloud SDK installation'
  'update:Command to update existing or install new components'
)

__gcloud-components ()
{
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "gcloud :: components Commands" _components_arguments
      return
      ;;
  esac
}

## for 'config' command groups
local -a _config_arguments
_config_arguments=(
  'list:View Google Cloud SDK properties'
  'set:Edit Google Cloud SDK properties'
  'unset:Erase Google Cloud SDK properties'
)

__gcloud-config ()
{
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "gcloud :: config Commands" _config_arguments
      return
      ;;
  esac
}


## for 'sql' command groups
local -a _sql_arguments
_sql_arguments=(
  'backups:Provide commands for working with backups of Cloud SQL instances'
  'instances:Provide commands for managing Cloud SQL instances'
  'operations:Provide commands for working with Cloud SQL instance operations'
  'ssl-certs:Provide commands for managing SSL certificates of Cloud SQL instances'
  'tiers:Provide a command to list tiers'
)

__gcloud-sql ()
{
  local curcontext="$curcontext" state line
  local -A opt_args

  _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)
      _describe -t commands "gcloud :: sql Commands" _sql_arguments
      return
      ;;
  esac
}

## Utils

skip_options () {
  local origin_line=$1
  local clean_line
  for i in $origin_line
  do
    echo $i
    [[ $i[1,2] != "--" ]] && clean_line="$clean_line $i"
  done
  print $clean_line
}


## Top-level completion function
local expl
local curcontext="$curcontext" state line
local -A opt_args

_arguments -C \
  $common_ops \
  ':command:->command' \
  '*::options:->options'

case $state in
  (command)
    _describe -t commands "Google Cloud SDK Commands" _first_arguments
  ;;


  (options)
    # subcommands
#    echo
#    echo state: $state
#    echo line: $line 
#    echo "line[1]": $line[1]
#    echo words: $words
#    echo 
    case $line[1] in
      (auth)
        __gcloud-auth
        ;;
      (components)
        __gcloud-components
        ;;
      (config)
        __gcloud-config
        ;;
      (sql)
        __gcloud-sql
        ;;
    esac
  ;;
esac

return 0
# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
